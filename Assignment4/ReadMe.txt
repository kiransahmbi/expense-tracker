//////////////////
Expense Tracker
//////////////////

Added Items:

- Splash Screen

- 6 Controls: Buttons, Labels, Textboxes, Radio Buttons, Checkboxes, TabControls

- ComboBox

- 2 Dictionarioes, 1 Linked List, 2 Lists

- 1 DataGridView

- Data is read and written from/to XML file

- Expenses can be added, removed, modified in GUI/at runtime

- There is a status bar that shows what data is sent or received from main form.

- Technical Difficulty
	- Used Expander GUI Control
	- Using Border GUI Elements in xaml
	- Toggling the visibility of certain buttons based on which Tab Control is selected
	- Using AutoGeneratingColumn property of DataView to set DateTime format for 'ExpenseDate' column (Different from AutoGeneratedColumns)
	  Also set Cost format ($40.32) using AutoGeneratingColumn property.

- Linq Queries (8 Queries)
	- Can filter by Expense Category (Where Query)
	- Can filter by Start/End Date (Where Query)
	- Can Group By Category with:
		- Total Cost (Group By Sum Query)
		- Average Cost (Group By Average Query)
		- Min/Max (Group By Min/Max Query)
	- Can Group By Vendor with:
		- Total Cost (Group By Sum Query)
		- Average Cost (Group By Average Query)
		- Min/Max (Group By Min/Max Query)

- Generic Method that intakes a list with an undefined data type (List<T>), and will set the DataView.ItemsSource to that list.
  This is useful as LINQ queries can be of datatypes: List<Expense>, List<a> where a is an anonymous object (This occurs with the group by queries)
  Examples of List<a> include:
								a = {string Category, double Min_Cost, double Max_Cost}
								a = {string Category, double Average_Cost}
								a = {string Category, double Total_Cost}
								a = {string Vendor, double Min_Cost, double Max_Cost}
								a = {string Vendor, double Average_Cost}
								a = {string Vendor, double Total_Cost}

- Usability
	- Tab and enter keys work
	- Error handling to control user input
	- Form & DataView pre-filled with data
	- Does not crash! Easy to Use
